{"version":3,"sources":["list.js"],"names":["createList","createNode","value","appendList","list","node","x","next","removeFromList","p","data","travelList","fn","node2","node3","node4","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa,SAAbA,UAAa,QAAS;AACxB,WAAOC,WAAWC,KAAX,CAAP;AACH,CAFD;;AAIA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAMF,KAAN,EAAgB;AAC/B,QAAMG,OAAOJ,WAAWC,KAAX,CAAb;AACA,QAAII,IAAIF,IAAR;AACA,WAAME,EAAEC,IAAR,EAAa;AACTD,YAAIA,EAAEC,IAAN;AACH;AACG;AACAD,MAAEC,IAAF,GAASF,IAAT;AACA,WAAOA,IAAP;AACP,CATD;;AAYA,IAAMG,iBAAiB,SAAjBA,cAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAgB;AACnC,QAAIC,IAAIF,IAAR;AACA,QAAIK,IAAI,IAAR;AACA,WAAMH,MAAMD,IAAZ,EAAiB;AACbI,YAAIH,CAAJ;AACAA,YAAIA,EAAEC,IAAN;AACH;AACD;AACA;AACAE,MAAEF,IAAF,GAASD,EAAEC,IAAX;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBH,CApCD;;AAuCA,IAAMN,aAAa,SAAbA,UAAa,QAAS;AACxB,WAAM;AACFS,cAAMR,KADJ;AAEFK,cAAM;AAFJ,KAAN;AAIH,CALD;;AAOA,IAAMI,aAAa,SAAbA,UAAa,CAACP,IAAD,EAAMQ,EAAN,EAAa;AAC5B,QAAIN,IAAIF,IAAR;AACA,WAAME,MAAM,IAAZ,EAAiB;AACbM,WAAGN,CAAH;AACAA,YAAIA,EAAEC,IAAN;AACH;AACJ,CAND,EAMC;;AAED,IAAMH,OAAOJ,WAAW,EAAX,CAAb;AACA,IAAMa,QAAQV,WAAWC,IAAX,EAAgB,EAAhB,CAAd;AACA,IAAMU,QAAQX,WAAWC,IAAX,EAAgB,EAAhB,CAAd;AACA,IAAMW,QAAQZ,WAAWC,IAAX,EAAgB,EAAhB,CAAd;AACAI,eAAeJ,IAAf,EAAoBU,KAApB;AACAH,WAAWP,IAAX,EAAgB,gBAAQ;AACpBY,YAAQC,GAAR,CAAYZ,KAAKK,IAAjB;AACH,CAFD;AAGAM,QAAQC,GAAR,CAAY,MAAZ;AACAD,QAAQC,GAAR,CAAYb,IAAZ","file":"list.27ffcf6d.map","sourceRoot":"..\\src","sourcesContent":["const createList = value => {\r\n    return createNode(value)\r\n}\r\n\r\nconst appendList = (list,value) => {\r\n    const node = createNode(value)\r\n    let x = list\r\n    while(x.next){\r\n        x = x.next\r\n    }\r\n        // x.next === null //x是最后一个点\r\n        x.next = node;\r\n        return node;\r\n}\r\n\r\n\r\nconst removeFromList = (list, node) => {\r\n    let x = list;\r\n    let p = null;\r\n    while(x !== node){\r\n        p = x;\r\n        x = x.next\r\n    } \r\n    //console.log(p === null || p === x的上一个节点)\r\n    //console.log(x === node || x === null)\r\n    p.next = x.next\r\n  \r\n    /*\r\n    if(list === node){\r\n        //如果删除的是第一个节点\r\n        //list指向第2个节点\r\n        list = node.next;\r\n    }else{\r\n        //如果删除的是第二个节点\r\n        //第1个节点.next = 第2个节点.nex\r\n        if(list.next === node){\r\n            list.next = node.next;\r\n        }else{\r\n            //如果删除的是第三个节点\r\n            //第2个节点.next = 第3个节点.next\r\n            if(list.next.next === node){\r\n                list.next.next = node.next;\r\n            }else{\r\n                //如果删除的是第四个节点\r\n                //第3个节点.next = 第4个节点.next\r\n                if(list.next.next.next === node){\r\n                    list.next.next.next = node.next;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    */\r\n}\r\n\r\n\r\nconst createNode = value => {\r\n    return{\r\n        data: value,\r\n        next: null\r\n    }\r\n}\r\n\r\nconst travelList = (list,fn) => {\r\n    let x = list;\r\n    while(x !== null){\r\n        fn(x);\r\n        x = x.next;\r\n    }\r\n}//遍历\r\n\r\nconst list = createList(10);\r\nconst node2 = appendList(list,20);\r\nconst node3 = appendList(list,30);\r\nconst node4 = appendList(list,40);\r\nremoveFromList(list,node3)\r\ntravelList(list,node => {\r\n    console.log(node.data);\r\n});\r\nconsole.log('list');\r\nconsole.log(list);"]}